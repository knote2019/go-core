

M：machine的缩写。一个M代表一个内核线程，或者“工作线程”。
P：processor的缩写。一个P代表执行一个Go代码片段所必需的资源（或称“上下文环境”）。
G：goroutine的缩写。一个G代表一个Go代码片段。前者是对后者的一种封装。


runtime.GOMAXPROCS(runtime.NumCPU())


runtime.LockOSThread和runtime.UnlockOSThread函数
前者调用会使调用他的Goroutine与当前运行它的M锁定到一起，后者调用会解除这样的锁定。


创建一个channel， make(chan TYPE {, NUM})
TYPE 指的是channel中传输的数据类型，
NUM  参数是可选的，指的是channel的容量大小。


ch <- v    // 发送值v到Channel ch中  
v := <-ch  // 从Channel ch中接收数据，并将数据赋值给v  


chan float64    // 可以接收和发送类型为 float64 的数据  
chan<- float64  // 只可以用来发送 float64 类型的数据  
<-chan float64  // 只可以用来接收 float64 类型的数据  

